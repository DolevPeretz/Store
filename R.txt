🧠 טכנולוגיות עיקריות בפרויקט
Frontend
Next.js 14 – כולל תמיכה ב־App Router, Server Actions, Routing דינמי.

React – עם רכיבים מופרדים היטב, useState, useEffect, useCallback.

TypeScript – הגדרת טיפוסים מדויקת לכל פרופס, פונקציה, אובייקט.

Tailwind CSS – סטיילינג מהיר ויעיל עם utility classes.

ShadCN UI – ספריית קומפוננטות מוכנה לשימוש כולל Card, Table, Separator, Button.

Clerk Auth – מערכת הרשאות מבוססת Clerk כולל userId ו-email validation.

Backend
Prisma ORM – תקשורת עם מסד נתונים, כולל שאילתות findUnique, findMany, create, update, delete.

PostgreSQL או MySQL – מסד הנתונים בו נעשה שימוש מאחורי הקלעים (בהנחה בהתאם ל־Prisma).

Stripe – שילוב תשלומים עם Embedded Checkout, כולל session management ו-confirmation hooks.

Supabase – לא נכלל ישירות בקוד הזה, אבל נראה שזה חלק מהפרויקט הכללי.

Axios – קריאות API מהצד לקוח (למשל לפעולת התשלום).

API Routes in Next.js – שימוש ב־app/api/.../route.ts לטיפול ב־checkout ו־confirmation.

🔁 עקרונות תכנותיים ושיטות עבודה
1. Server Actions ו־Form Actions
שימוש ב־FormContainer ושילוב עם Server Actions לניהול טפסים מאובטח בצד שרת.

שליחת FormData ולא JSON – גישה שמתאימה למבנה של React Server Actions.

bind() – שימוש ב־.bind() כדי להעביר פרמטרים ספציפיים לפונקציות שנשלחות לטופס (action={deleteProduct.bind(null, { id })}).

2. Component Composition (הרכבת קומפוננטות)
הפרדה ברורה בין קומפוננטות UI (כמו Table, SelectProductAmount, Card) לבין קומפוננטות לוגיקה (AddToCart, ThirdColumn, CartItemsList).

שימוש ב־props מדויקים ו־modular structure.

3. שימוש ב־State וניהול דינמיקה
useState לשמירה על כמויות משתנות של מוצרים.

useCallback לשמירה על פונקציות יציבות בביצועים.

4. Validations ו־Error Handling
renderError(error) + שימוש ב־try-catch בפעולות שרת.

ולידציה (במקרים מסוימים עם טיפוסי TypeScript או זיהוי משתמשים).

5. Routing דינמי
שימוש בפרמטרים (params.id) ב־page.tsx לדפי מוצרים, הזמנות, עריכה.

Redirect לפי user authentication וסטטוס (redirect("/orders") או /admin/products).

6. הפרדת אחריות לפי תפקידים
actions.ts מרכז את הלוגיקה העסקית.

page.tsx מתפקד כ־controller, שמביא את הנתונים ומרנדר את הקומפוננטות.

7. שימוש ב־Stripe
תהליך תשלום מלא:

יצירת session עם פרטי מוצרים.

שליחה ל־Stripe והפניה חזרה עם session_id.

אימות הצלחה דרך Confirm route.

עדכון סטטוס ההזמנה וניקוי העגלה.





דוגמה ראשונית לפוסט שיווקי:
🚀 אחרי תקופה מרוכזת של למידה ופיתוח – אני גאה לשתף את אחד הפרויקטים הכי מקיפים שבניתי עד כה:

🛒 חנות אונליין מלאה, עם מערכת ניהול מוצרים, עגלת קניות, תשלום דרך Stripe, מערכת התחברות מבוססת Clerk, וממשק ניהול למנהלי מערכת.

💻 טכנולוגיות:
Next.js 14, React, TypeScript, Tailwind CSS, Supabase (PostgreSQL), Prisma ORM, Clerk Auth, Stripe Payments, Zod, Server Actions.

🧠 מה שלמדתי:
איך לבנות ממשק מתקדם שמגיב בזמן אמת, לעבוד עם database schemas אמיתיים, לכתוב Server Actions יעילים, ולחבר בין צד לקוח לצד שרת בצורה חלקה.

🔗 הפרויקט זמין בקוד פתוח / או אפשר להתרשם מהדמו כאן: [קישור]

👀 אשמח לפידבק, רעיונות לשיפור, או סתם לפרגונים קטנים 💙